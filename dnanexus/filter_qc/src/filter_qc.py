#!/usr/bin/env python
# filter_qc 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os, subprocess, shlex
import dxpy

@dxpy.entry_point('main')
def main(input_bam, paired_end, samtools_params):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    raw_bam_file = dxpy.DXFile(input_bam)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    raw_bam_filename = raw_bam_file.name
    raw_bam_basename = raw_bam_filename.rstrip('.bam')
    dxpy.download_dxfile(raw_bam_file.get_id(), raw_bam_filename)
    filt_bam_filename = raw_bam_basename + ".filt.srt.bam"
    tmp_filt_bam_filename = raw_bam_basename + ".dupmark.bam"
    dup_file_qc_filename = raw_bam_basename + ".dup.qc"

    print subprocess.check_output('ls -l', shell=True)

    with open(filt_bam_filename, 'w') as fh:
        subprocess.check_call(shlex.split("samtools view -F 1804 %s -b %s" \
            %(samtools_params, raw_bam_filename)), stdout=fh)

    subprocess.check_call(shlex.split(
        "java -Xmx4G -jar /picard/MarkDuplicates.jar INPUT=%s OUTPUT=%s METRICS_FILE=%s \
         VALIDATION_STRINGENCY=LENIENT ASSUME_SORTED=true REMOVE_DUPLICATES=false"
         %(filt_bam_filename, tmp_filt_bam_filename, dup_file_qc_filename)))

    open("filtered_bam_index",'a').close()
    open("filtered_mapstats",'a').close()
    open("pbc_file_qc",'a').close()


    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    filtered_bam = dxpy.upload_local_file(filt_bam_filename)
    filtered_bam_index = dxpy.upload_local_file("filtered_bam_index")
    filtered_mapstats = dxpy.upload_local_file("filtered_mapstats")
    dup_file_qc = dxpy.upload_local_file(dup_file_qc_filename)
    pbc_file_qc = dxpy.upload_local_file("pbc_file_qc")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["filtered_bam"] = dxpy.dxlink(filtered_bam)
    output["filtered_bam_index"] = dxpy.dxlink(filtered_bam_index)
    output["filtered_mapstats"] = dxpy.dxlink(filtered_mapstats)
    output["dup_file_qc"] = dxpy.dxlink(dup_file_qc)
    output["pbc_file_qc"] = dxpy.dxlink(pbc_file_qc)

    return output

dxpy.run()
